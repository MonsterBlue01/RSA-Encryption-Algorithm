#include <iostream>
#include <string>
#include <cstring>
#include <cmath>
#include <gmp.h>

using namespace std;

// Generate a random prime number with a given number of bits
void generate_prime(mpz_t p, int bits) {
  mpz_urandomb(p, rand, bits);
  mpz_nextprime(p, p);
}

// Generate the public and private keys
void generate_keys(mpz_t e, mpz_t d, mpz_t p, mpz_t q) {
  mpz_t phi;
  mpz_init(phi);

  // Compute phi(n) = (p - 1)(q - 1)
  mpz_sub_ui(p, p, 1);
  mpz_sub_ui(q, q, 1);
  mpz_mul(phi, p, q);

  // Choose e such that 1 < e < phi and gcd(e, phi) = 1
  do {
    mpz_urandomm(e, rand, phi);
  } while (mpz_cmp_ui(e, 1) <= 0 || mpz_gcd(NULL, e, phi) != 1);

  // Compute d such that d * e = 1 (mod phi)
  mpz_invert(d, e, phi);

  mpz_clear(phi);
}

// Encrypt a message m using the public key (n, e)
void encrypt(mpz_t c, mpz_t m, mpz_t n, mpz_t e) {
  // c = m^e (mod n)
  mpz_powm(c, m, e, n);
}

// Decrypt a message c using the private key d
void decrypt(mpz_t m, mpz_t c, mpz_t d, mpz_t n) {
  // m = c^d (mod n)
  mpz_powm(m, c, d, n);
}

int main() {
  mpz_t p, q, n, e, d, m, c;
  mpz_init(p);
  mpz_init(q);
  mpz_init(n);
  mpz_init(e);
  mpz_init(d);
  mpz_init(m);
  mpz_init(c);

  // Generate the prime numbers p and q
  generate_prime(p, 512);
  generate_prime(q, 512);

  // Compute n = p * q
  mpz_mul(n, p, q);

  // Generate the public and private keys
  generate_keys(e, d, p, q);

  // Get the message to encrypt
  cout << "Enter a message to encrypt: ";
  string message;
  getline(cin, message);

  // Convert the message to a number
  mpz_import(m, message.size(), 1, 1, 0, 0, message.c_str());

  // Encrypt the message
  encrypt(c, m, n, e);
  
  // Convert the encrypted message back to a string
  size_t count;
  void *encrypted_message = mpz_export(NULL, &count, 1, 1, 0, 0, c);
  string encrypted_string((char*)encrypted_message, count);
  cout << "Encrypted message: " << encrypted_string << endl;

  // Decrypt the message
  decrypt(m, c, d, n);

  // Convert the decrypted message back to a string
  void *decrypted_message = mpz_export(NULL, &count, 1, 1, 0, 0, m);
  string decrypted_string((char*)decrypted_message, count);
  cout << "Decrypted message: " << decrypted_string << endl;

  mpz_clear(p);
  mpz_clear(q);
  mpz_clear(n);
  mpz_clear(e);
  mpz_clear(d);
  mpz_clear(m);
  mpz_clear(c);
  free(encrypted_message);
  free(decrypted_message);

  return 0;
}

